#ifndef WBC_ROS_CARTESIAN_POSITION_CONTROLLER_HPP
#define WBC_ROS_CARTESIAN_POSITION_CONTROLLER_HPP

#include <wbc_msgs/msg/rigid_body_state.hpp>

#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <wbc/controllers/CartesianPosPDController.hpp>
#include <wbc/types/RigidBodyState.hpp>
#include <realtime_tools/realtime_buffer.hpp>
#include <realtime_tools/realtime_publisher.hpp>

// auto-generated by generate_parameter_library
#include "cartesian_position_controller_parameters.hpp"

namespace wbc_ros{

/**
@brief Position controller in Cartesian space. See <a href="https://github.com/ARC-OPT/wbc/blob/master/src/controllers/CartesianPosPDController.hpp">here</a> for details.
*/
class CartesianPositionController : public rclcpp_lifecycle::LifecycleNode{

    enum ControlMode{
       unset = -1,
       velocity = 0,
       acceleration = 1
    };   

    using RbsMsg = wbc_msgs::msg::RigidBodyState;
    using RbsMsgPtr = std::shared_ptr<wbc_msgs::msg::RigidBodyState>;
    using RbsSubscription = rclcpp::Subscription<RbsMsg>::SharedPtr;

    using RTRbsBuffer = realtime_tools::RealtimeBuffer<RbsMsgPtr>;
    using RbsPublisher = rclcpp::Publisher<RbsMsg>;
    using RTRbsPublisher = realtime_tools::RealtimePublisher<RbsMsg>;

protected:
    wbc::CartesianPosPDController* controller;
    wbc::types::RigidBodyState feedback;
    wbc::types::RigidBodyState setpoint;
    wbc::types::RigidBodyState control_output;

    RbsMsgPtr setpoint_msg;
    RTRbsBuffer rt_setpoint_buffer;
    RbsSubscription setpoint_subscriber;

    RbsMsgPtr feedback_msg;
    RTRbsBuffer rt_feedback_buffer;
    RbsSubscription feedback_subscriber;

    RbsMsg control_output_msg;
    RbsPublisher::SharedPtr control_output_publisher;
    std::unique_ptr<RTRbsPublisher> rt_control_output_publisher;

    std::shared_ptr<cartesian_position_controller::ParamListener> param_listener;
    cartesian_position_controller::Params params;
    bool has_setpoint, has_feedback;
    rclcpp::TimerBase::SharedPtr timer;

    void setpoint_callback(const RbsMsgPtr msg);
    void feedback_callback(const RbsMsgPtr msg);
    void write_control_output();
    void update();

public:
    CartesianPositionController(const rclcpp::NodeOptions & options);
    ~CartesianPositionController(){}

    virtual CallbackReturn on_configure(const rclcpp_lifecycle::State & previous_state) override;
    virtual CallbackReturn on_activate(const rclcpp_lifecycle::State & previous_state) override;
    virtual CallbackReturn on_deactivate(const rclcpp_lifecycle::State & previous_state) override;
    virtual CallbackReturn on_cleanup(const rclcpp_lifecycle::State & previous_state) override;
    virtual CallbackReturn on_error(const rclcpp_lifecycle::State & previous_state) override;
    virtual CallbackReturn on_shutdown(const rclcpp_lifecycle::State & previous_state) override;
};

}

#endif
