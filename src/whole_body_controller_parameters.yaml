whole_body_controller:
    control_mode: {
        type: string,
        default_value: "",
        description: "Control mode of the wbc. Can be one of [velocity,acceleration].",
        validation: {
            not_empty<>: null,
            one_of<>: [["velocity", "acceleration"]]
        }
    }
    robot_description: {
        type: string,
        default_value: "",
        description: "Robot URDF.",
        validation: {
            not_empty<>: null
        }
    }
    command_interfaces: {
        type: string_array,
        default_value: [],
        description: "Command interfaces to claim from hardware.",
        validation: {
            not_empty<>: null,
            unique<>: null,
        }
    }
    state_interfaces: {
        type: string_array,
        default_value: [],
        description: "State interfaces to claim from hardware.",
        validation: {
            not_empty<>: null,
            unique<>: null,
        }
    }
    prefix: {
        type: string,
        default_value: "",
        description: "Prefix used in the robot description parameter to claim the correct state and command interface names."
    }
    task_names: {
        type: string_array,
        default_value: [],
        description: "Names of the tasks to be configured in task configuration. Each task will be a summand in the QP solver's cost function.",
        validation: {
            not_empty<>: null,
        }
    }
    contact_names: {
        type: string_array,
        default_value: [],
        description: "Link names that are in contact with the environment. These have to be valid link names in the robot model.",
        validation: {
            unique<>: null,
        }
    }
    joint_weights: {
        type: double_array,
        default_value: [],
        description: "The joint weights control the contribution of each individual joint to the solution. Values have to be within [0,1].
                      A zero means here that the joint is not used at all. Size has to be same as number of robot joints.",
        validation: {
            not_empty<>: null,        
        }
    }
    robot_model:
        type: {
            type: string,
            default_value: "rbdl",
            description: "Robot model type. Must be the exact name of one of the registered robot model plugins. See src/robot_models for all available plugins.*/",
            validation: {
                one_of<>: [["rbdl", "pinocchio", "kdl", "hyrodyn"]],
            }
        }
        submechanism_file: {
            type: string,
            default_value: "",
            description: "Only if type:=hyrodyn. Absolute path to submechanism file, which the robot's parallel submechanisms. See Hyrodyn docs for more info.",
        }
        joint_blacklist: {
            type: string_array,
            default_value: [],
            description: "Blacklisted joints will be set to fixed joints in URDF.",
            validation: {
                unique<>: null,
            }
        }
        floating_base: {
            type: bool,
            default_value: false,
            description: "Optionally attach a virtual 6 DoF floating base to the model. Naming scheme: [floating_base_trans_x, floating_base_trans_y, floating_base_trans_z, \
                          floating_base_rot_x, floating_base_rot_y, floating_base_rot_z]. The floating must not be added to the URDF model.",
        }
        contact_points:
            __map_contact_names:
                  active: {
                      type: int,
                      default_value: 0,
                      description: "Is the link initially in contact?",
                      validation: {
                          one_of<>: [[0,1]]
                      }
                  }
                  mu: {
                      type: double,
                      default_value: 0.0,
                      description: "Friction coeffcient for the contact point.",
                      validation: {
                          gt<>: [0.0]
                      }
                  }
                  wx: {
                      type: double,
                      default_value: 0.0,
                      description: "x-dimension of the contact surface (only for surface contacts).",
                      validation: {
                          gt<>: [0.0]
                      }
                  }
                  wy: {
                      type: double,
                      default_value: 0.0,
                      description: "y-dimension of the contact surface (only for surface contacts).",
                      validation: {
                          gt<>: [0.0]
                      }
                  }
    solver:
        type: {
            type: string,
            default_value: "qp_oases",
            description: "QP Solver type. Must be the exact name of one of the registered QP solver plugins. See src/solvers for all available plugins.",
            validation: {
                one_of<>: [["qpoases", "hls", "proxqp", "qpswift", "eiquadprog"]],
            }
        }
        file: {
            type: string,
            default_value: "",
            description: "Absolute path to solver configuration file in yaml format. If empty, default solver configuration is used.",
        }
    scene:
        type: {
            type: string,
            default_value: "velocity_qp",
            description: "Scene type. Must be the exact name of one of the registered scene plugins. See src/scenes for all available plugins.",
            validation: {
                not_empty<>: null,
                one_of<>: [["velocity", "velocity_qp", "acceleration", "acceleration_tsid", "acceleration_reduced_tsid"]],
            }
        }
        file: {
            type: string,
            default_value: "",
            description: "Absolute path to scene configuration file in yaml format. If empty, default scene configuration is used.",
        }
    tasks:
        __map_task_names:
            type: {
                type: string,
                default_value: "",
                description: "Task type, can be one of 'jnt' (joint space task), 'cart' (Cartesian task) or 'com' (Center of Mass task).",
                validation: {
                    one_of<>: [["jnt", "cart", "com"]],
                }
            }
            weights: {
                type: double_array,
                default_value: [],
                description: "Initial weights for this task. Size has to be same as number of task variables, e.g. number of joint names in joint space tasks.\
                              and 6 in case of a Cartesian task. All entries have to be >= 0.  Can be used to balance contributions of the task variables.\
                              A value of 0 means that the reference of the corresponding task variable will be ignored while computing the solution.",
                validation: {
                    not_empty<>: null,
                    lower_element_bounds<>: [0.0]
                }
            }
            activation: {
                type: double,
                default_value: 0.0,
                description: "Initial activation for this task. Has to be within 0 and 1. Can be used to enable(1)/disable(0) the whole task,\
                              or to apply a smooth activation function.",
                validation: {
                    bounds<>: [0.0,1.0]
                }
            }
            priority: {
                type: int,
                default_value: 0,
                description: "Priority of this task. 0 corresponds to the highest priority. Prioritization is only supported by the hls solver.",
                validation: {
                    gt_eq<>: [0]
                }
            }
            root: {
                type: string,
                default_value: "",
                description: "Only Cartesian tasks:  Root frame of the kinematic chain associated with this task. Has to be the name of a valid link in the robot model.\
                              Only robot_model.type!=kdl supports root frames, which are not equal to the root of the URDF tree.",
            }
            tip: {
                type: string,
                default_value: "",
                description: "Only Cartesian tasks:  Tip frame of the kinematic chain associated with this task. Has to be the name of a valid link in the robot model.",
            }
            ref_frame: {
                type: string,
                default_value: "",
                description: "Only Cartesian tasks:  Reference frame of the task input (frame wrt which the input is expressed).\
                              This has to be the name of a valid link in robot model. If ref_frame != root the input will be transformed to the root frame.",
            }
            joint_names: {
                type: string_array,
                default_value: [],
                description: "Only joint space tasks: Names of the joints involved in this task.",
                validation: {
                    unique<>: null,
                }
            }
            timeout: {
                type: double,
                default_value: 0.0,
                description: "Timeout of this task in seconds. Output for this task will be set to zero if, for more than this amount of time, no new reference is set.\
                              A value of 0 will be interpreted as infinite.",
                validation: {
                    gt_eq<>: [0.0]
                }
            }
