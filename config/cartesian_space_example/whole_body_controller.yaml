whole_body_controller:
    ros__parameters:
        # Update rate in Hz. 
        update_rate: 1000
        # Control mode of the wbc. Can be one of 0 - velocity, 1 - acceleration.
        control_mode: 0
        # Names of the tasks to be configured in task configuration. Each task will be a summand in the QP solver's cost function.
        task_names: ["ee_pose"]
        # Prefix used in the robot description parameter to claim the correct state and command interface names.
        prefix: ""
        # The joint weights control the contribution of each individual joint to the solution. Values have to be within [0,1].
        # A zero means here that the joint is not used at all. Size has to be same as number of robot joints.
        joint_weights: [1.0,1.0,1.0,1.0,1.0,1.0,1.0]
        robot_model:
            # Absolute path to plain URDF file of the robot
            file: install/wbc_ros/share/wbc_ros/models/urdf/kuka/iiwa.urdf
            # Robot model type. Must be the exact name of one of the registered robot model plugins. See src/robot_models for all available plugins. Default is pinocchio
            type: pinocchio
        tasks:
            ee_pose:
                # Task type, can be one of 0 - spatial_velocity, 1 - spatial_acceleration, 2 - com_velocity, 3 - com_acceleration, 4 - joint_velocity, 5 - joint_acceleration, 6 - contact_wrench
                type: 0
                # Priority of this task. 0 corresponds to the highest priority. Prioritization is only supported by the hls solver.
                priority: 0
                # Only Cartesian tasks: Tip frame of the kinematic chain associated with this task. Has to be the name of a valid link in the robot model.
                tip_frame: tool0
                # Only Cartesian tasks: Reference frame of the task input (frame wrt which the input is expressed).
                # This has to be the name of a valid link in robot model. If ref_frame != root the input will be transformed to the root frame.
                ref_frame: world
                # Initial weights for this task. Size has to be same as number of task variables, e.g. number of joint names in joint space tasks.
                # and 6 in case of a Cartesian task. All entries have to be >= 0.  Can be used to balance contributions of the task variables.
                # A value of 0 means that the reference of the corresponding task variable will be ignored while computing the solution.
                weights: [1.0,1.0,1.0,1.0,1.0,1.0]
                # Initial activation for this task. Has to be within 0 and 1. Can be used to enable(1)/disable(0) the whole task,
                # or to apply a smooth activation function.
                activation: 1.0
        solver:
            # QP Solver type. Must be the exact name of one of the registered QP solver plugins. See src/solvers for all available plugins. Default is qpoases
            type: qpoases
        scene:
            # Scene type. Must be the exact name of one of the registered scene plugins. See src/scenes for all available plugins.
            type: velocity_qp
        # Do numerical integration on the solver output, e.g. if output is acceleration type, integrate twice to get velocity and position
        integrate: true
