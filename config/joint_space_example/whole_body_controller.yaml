whole_body_controller:
    ros__parameters:
        # Update rate in Hz. 
        update_rate: 1000
        # Prefix used in the robot description parameter to claim the correct state and command interface names.
        prefix: ""
        # The joint weights control the contribution of each individual joint to the solution. Values have to be within [0,1].
        # A zero means here that the joint is not used at all. Size has to be same as number of robot joints.
        joint_weights: [1.0,1.0,1.0,1.0,1.0,1.0,1.0]
        robot_model:
            # Absolute path to plain URDF file of the robot
            file: install/wbc_ros/share/wbc_ros/models/urdf/kuka/iiwa.urdf
            # Robot model type. Must be the exact name of one of the registered robot model plugins. See src/robot_models for all available plugins. Default is pinocchio
            type: pinocchio
        ee_pose_task:
            # Only Cartesian tasks: Tip frame of the kinematic chain associated with this task. Has to be the name of a valid link in the robot model.
            tip_frame: tool0
            # Only Cartesian tasks: Reference frame of the task input (frame wrt which the input is expressed).
            # This has to be the name of a valid link in robot model. If ref_frame != root the input will be transformed to the root frame.
            ref_frame: world
            # Initial weights for this task. Size has to be 6 (3 xyz-position, 3 xyz-orientation weights). 
            # All entries have to be >= 0.  Can be used to balance contributions of the task variables.
            # A value of 0 means that the reference of the corresponding task variable will be ignored while computing the solution.
            weights: [1.0,1.0,1.0,1.0,1.0,1.0]
            # Initial activation for this task. Has to be within 0 and 1. Can be used to enable(1)/disable(0) the whole task,
            # or to apply a smooth activation function.
            activation: 0.0
            # P-Gain of the controller, size has to be 6.
            p_gain: [10.0,10.0,10.0,10.0,10.0,10.0]
            # Controller output saturation per element. Size has to be 6.
            max_control_output: [10.0,10.0,10.0,10.0,10.0,10.0]
        joint_position_task:
            # Initial weights for this task. Size has to be same as number of robot joints. 
            # All entries have to be >= 0.  Can be used to balance contributions of the task variables.
            # A value of 0 means that the reference of the corresponding task variable will be ignored while computing the solution.
            weights: [1.0,1.0,1.0,1.0,1.0,1.0,1.0]
            # Initial activation for this task. Has to be within 0 and 1. Can be used to enable(1)/disable(0) the whole task,
            # or to apply a smooth activation function.
            activation: 1.0
            # P-Gain of the controller, size has to be same as number of robot joints.
            p_gain: [10.0,10.0,10.0,10.0,10.0,10.0,10.0]
            # Controller output saturation per element. Size has to be same as number of robot joints.
            max_control_output: [10.0,10.0,10.0,10.0,10.0,10.0,1.0]            
        elbow_pose_task:
            # Only Cartesian tasks: Tip frame of the kinematic chain associated with this task. Has to be the name of a valid link in the robot model.
            tip_frame: link_4
            # Only Cartesian tasks: Reference frame of the task input (frame wrt which the input is expressed).
            # This has to be the name of a valid link in robot model. If ref_frame != root the input will be transformed to the root frame.
            ref_frame: world
            # Initial weights for this task. Size has to be 6 (3 xyz-position, 3 xyz-orientation weights). 
            # All entries have to be >= 0.  Can be used to balance contributions of the task variables.
            # A value of 0 means that the reference of the corresponding task variable will be ignored while computing the solution.
            weights: [1.0,1.0,1.0,0.0,0.0,0.0]
            # Initial activation for this task. Has to be within 0 and 1. Can be used to enable(1)/disable(0) the whole task,
            # or to apply a smooth activation function.
            activation: 0.0
            # P-Gain of the controller, size has to be 6.
            p_gain: [10.0,10.0,10.0,0.0,0.0,0.0]
            # Controller output saturation per element. Size has to be 6.
            max_control_output: [10.0,10.0,10.0,10.0,10.0,10.0]            
        solver:
            # QP Solver type. Must be the exact name of one of the registered QP solver plugins. See src/solvers for all available plugins. Default is qpoases
            type: qpoases
